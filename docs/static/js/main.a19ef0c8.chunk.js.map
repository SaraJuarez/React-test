{"version":3,"sources":["components/header.js","components/Card.js","components/PeopleList.js","components/footer.js","components/Map.js","components/PersonDetail.js","App.js","services/ListService.js","serviceWorker.js","index.js"],"names":["Header","className","to","Card","props","alt","src","info","picture","medium","name","first","last","location","city","dob","age","login","uuid","PeopleList","listHtml","list","filter","result","citySelected","length","includes","sexSelected","gender","map","index","key","Footer","mapStyles","width","height","MapContainer","displayMarkers","state","stores","store","id","position","lat","latitude","lng","longitude","onClick","console","log","google","this","zoom","style","initialCenter","React","Component","GoogleApiWrapper","apiKey","process","REACT_APP_API_KEY","PersonDetail","moreInfoPerson","find","user","match","params","chartType","loader","data","options","title","chartArea","hAxis","minValue","vAxis","legendToggle","rootProps","App","useState","setList","setCities","setSex","cityFilter","sexFilter","useEffect","fetch","then","response","json","results","exact","path","render","routerProps","Boolean","window","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a19ef0c8.chunk.js","sourcesContent":["import React from 'react';\nimport { Link, Route, Switch } from 'react-router-dom';\n\n\nfunction Header() {\n\n    return (\n        <header className='App__header'>\n            <h1 className='App__header--title'>Test App eB2</h1>\n            <nav className='App__header--nav-ul'>\n                <ul>\n                    <li>\n                        <Link className='App__header--link' to='/'>Home</Link>\n\n                    </li>\n                </ul>\n            </nav>\n\n\n        </header>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport { Link } from \"react-router-dom\";\n\n\nfunction Card(props) {\n\n    return (\n\n        <div className='App__box2'>\n            <div className='App__box2--image' >\n                <img alt='foto de perfil' className='img' src={props.info.picture.medium} />\n            </div>\n            <div className='App__box2--text'>\n                <h4>{props.info.name.first} {props.info.name.last}</h4>\n                <p>{props.info.location.city}</p>\n                <p>{props.info.dob.age}</p>\n                <Link to={`/PersonDetail/` + props.info.login.uuid}>Más info</Link>\n            </div>\n        </div>\n\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nfunction PeopleList(props) {\n\n    let results = props.list;\n    const listHtml = results\n        .filter(result => {\n            if (props.citySelected.length === 0) {\n                return true;\n            } else {\n                return props.citySelected.includes(result.location.city)\n            }\n        })\n        .filter(result => { return props.sexSelected.length === 0 ? true : props.sexSelected.includes(result.gender) })\n        .map((result, index) =>\n            <Card info={result} key={index} />\n        )\n\n\n\n    return (\n        <div className='App__list'>\n            {listHtml}\n        </div>\n\n    )\n\n}\n\nexport default PeopleList;\n","import React from 'react';\n\n\nfunction Footer() {\n\n    return (\n        <div className='App__footer'>\n            <small className='App__footer--text'>Sara Juárez-2020</small>\n        </div>)\n}\n\nexport default Footer;","import React from 'react';\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\n\nconst mapStyles = {\n    width: '50%',\n    height: '50%',\n};\n\nexport class MapContainer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            stores: [{ lat: 40.4165000, lng: -3.7025600 }]\n        }\n    }\n\n    displayMarkers = () => {\n        return this.state.stores.map((store, index) => {\n            return <Marker key={index} id={index} position={{\n                lat: store.latitude,\n                lng: store.longitude\n            }}\n                onClick={() => console.log(\"You clicked me!\")} />\n        })\n    }\n\n    render() {\n        return (\n            <Map\n                google={this.props.google}\n                zoom={8}\n                style={mapStyles}\n                initialCenter={{ lat: 40.4165000, lng: -3.7025600 }}\n            >\n                {this.displayMarkers()}\n            </Map>\n        );\n    }\n}\nexport default GoogleApiWrapper({\n    apiKey: process.env.REACT_APP_API_KEY\n})(MapContainer);\n\n","import React from 'react';\nimport Chart from 'react-google-charts';\nimport MapContainer from './Map';\n\n\nfunction PersonDetail(props) {\n    let moreInfoPerson =\n        props.list.find(user => user.login.uuid === props.match.params.id)\n\n    return (\n\n        <div className='person-detail'>\n            <div className='person-detail__person-info'>\n                <div className='person-detail__person-info--image'>\n                    <img src={moreInfoPerson.picture.medium}></img>\n                </div>\n                <div className='person-detail__person-info--text'>\n                    <p>{moreInfoPerson.name.first}</p>\n                    <p>{moreInfoPerson.location.city}</p>\n                    <p>{moreInfoPerson.dob.age}</p>\n                </div>\n            </div>\n            <div className='person-detail__graphics'>\n                <div><Chart\n                    width={800}\n                    height={500}\n                    chartType=\"ColumnChart\"\n                    loader={<div>Loading Chart</div>}\n                    data={[\n                        ['Día', 'Horas de sueño'],\n                        ['Lunes', 5],\n                        ['Martes', 7],\n                        ['Miércoles', 8],\n                        ['Jueves', 5],\n                        ['Viernes', 6],\n                        ['Sábado', 10],\n                        ['Domingo', 8],\n                    ]}\n                    options={{\n                        title: 'Horas de sueño a la semana',\n                        chartArea: { width: '30%' },\n                        hAxis: {\n                            title: 'Días de la semana',\n                            minValue: 0,\n                        },\n                        vAxis: {\n                            title: 'Horas de sueño',\n                        },\n                    }}\n                    legendToggle\n                /></div>\n                {/* <MapContainer /> */}\n                <Chart\n                    width={800}\n                    height={500}\n                    chartType=\"PieChart\"\n                    loader={<div>Loading Chart</div>}\n                    data={[\n                        ['Lugar', 'Horas al día'],\n                        ['Trabajo', 8],\n                        ['Casa', 12],\n                        ['Iglesia', 2],\n                        ['Tiendas', 2],\n\n                    ]}\n                    options={{\n                        title: 'Lugares frecuentados',\n                    }}\n                    rootProps={{ 'data-testid': '1' }}\n                />\n\n            </div>\n        </div >\n    )\n}\n\n\nexport default PersonDetail;","import React, { useState, useEffect } from 'react';\nimport { Link, Route, Switch } from 'react-router-dom';\nimport './App.scss';\n// import './App.css';\nimport Header from './components/header';\nimport PeopleList from './components/PeopleList';\nimport Footer from './components/footer';\nimport { fetchList } from './services/ListService';\n// import Filters from './components/Filters';\nimport PersonDetail from './components/PersonDetail';\n\n\n\n\nfunction App() {\n  const [list, setList] = useState([]);\n  const [cities, setCities] = useState([]);\n  const [sex, setSex] = useState([]);\n  const [cityFilter, setCityFilter] = useState([])\n  const [sexFilter, setSexFilter] = useState([])\n\n  useEffect(() => {\n    fetchList().then(data => {\n      setList(data.results)\n      setCities(data.results.map(result => result.location.city))\n      setSex(data.results.map(result =>\n        result.gender))\n    })\n  }, []);\n\n  const filterCities = (ev) => {\n    let selectedCity = ev.target.value;\n    let checked = ev.target.checked;\n    let indexofCities = cityFilter.indexOf(selectedCity)\n    checked === true ? cityFilter.push(selectedCity) : cityFilter.splice(indexofCities, 1)\n    setCityFilter([...cityFilter])\n  }\n  const filterSex = (ev) => {\n    let selectedSex = ev.target.value;\n    let checked = ev.target.checked;\n    let indexofSex = sexFilter.indexOf(selectedSex)\n    checked === true ? sexFilter.push(selectedSex) : sexFilter.splice(indexofSex, 1)\n    setSexFilter([...sexFilter])\n  }\n\n\n  return (\n    <>\n      <div className=\"App\">\n        <Header />\n        <main>\n          <Switch>\n            <Route exact path='/' render={() =>\n              < div className=\"List\">\n                {/* <Filters cities={cities} sex={sex} cityFunction={filterCities} sexFunction={filterSex} /> */}\n                {<PeopleList sexSelected={sexFilter} citySelected={cityFilter} list={list} />}\n              </div>\n            }></Route>\n            <Route\n              path='/PersonDetail/:id'\n              render={routerProps => (\n                <PersonDetail list={list} match={routerProps.match}\n                />\n              )}\n            ></Route>\n          </Switch >\n        </main>\n\n      </div>\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","const ENDPOINT = 'https://randomuser.me/api/?results=5';\n\nconst fetchList = () => fetch(ENDPOINT).then(response => response.json());\n\nexport { fetchList };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom';\n\n\nReactDOM.render(\n  <HashRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}